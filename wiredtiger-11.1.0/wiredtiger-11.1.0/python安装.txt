/usr/bin/ld: /usr/local/lib64/libsnappy.a(snappy.cc.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /usr/local/lib64/libsnappy.a(snappy-sinksource.cc.o): relocation R_X86_64_32 against symbol `_ZTVN6snappy6SourceE' can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /usr/local/lib64/libsnappy.a(snappy-c.cc.o): relocation R_X86_64_PC32 against symbol `snappy_max_compressed_length' can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: final link failed: Bad value
collect2: error: ld returned 1 exit status

如果编译报错，可以跳过snappy，对应命令如下:
cmake -DENABLE_SNAPPY=0 ../.

启用snappy用DHAVE_BUILTIN_EXTENSION_SNAPPY=1， 不要用DENABLE_SNAPPY=1
cmake  -DHAVE_UNITTEST=1  -DHAVE_DIAGNOSTIC=1 -DENABLE_CPPSUITE=1 -DHAVE_BUILTIN_EXTENSION_SNAPPY=1  ../.

./configure --prefix=/usr/local/python-3.8.8  --enable-shared CFLAGS=-fPIC --enable-optimizations  升级python时候源码编译一定带上，否则高版本wiredtiger编译的时候会报错

wtperf使用: ./wtperf -o in_memory=true -o verbose=2 
./wtperf -o ../bench/wtperf/runners/500m-btree-50r50u-backup.wtperf
python ../test/suite/run.py  test_io_capacity01

c单元测试:ctest -C Debug
c++单元测试: 编译 cmake -DHAVE_BUILTIN_EXTENSION_SNAPPY=1  -DHAVE_UNITTEST=1  -DHAVE_DIAGNOSTIC=1 -DENABLE_CPPSUITE=1 ../.           然后make  然后./test/unittest/catch2-unittests


DENABLE_SNAPPY启用snappy编译不过问题解决办法如下:
1. git clone git@github.com:google/snappy #下载源码
   注意下载代码后需要在CMakeLists.txt文件的option(BUILD_SHARED_LIBS "Build shared libraries(DLLs)." ON)前面一行增加set(CMAKE_POSITION_INDEPENDENT_CODE ON)    #开启PIC
   这样就可以编码前面的snappy启用编译报错问题，可以参考https://blog.csdn.net/mybachelor123/article/details/117519710
2. git submodule update --init
3. mkdir build
4. cd build && cmake ../ && make

/root/mongodb-linux-x86_64-rhel70-7.0.7-rc0/bin/mongod -f /data/mongodb-data/mongodb-7.0.0/conf/mongod.conf  --wiredTigerStatisticsLogDelaySecs=5
python2.7  wtstats.py WiredTigerStat.09.11 

     $ echo "First get and build a working WiredTiger install"
     $ cd work
     $ wget http://source.wiredtiger.com/releases/wiredtiger-2.0.1.tar.bz2
     $ tar jxf wiredtiger-2.0.1.tar.bz2 && cd wiredtiger-2.0.1
     $ ./configure && make -j 12
     $ echo "Run an application that will generate statistics"
     $ mkdir WT_TEST && ./bench/wtperf/wtperf \
	-O bench/wtperf/runners/update-lsm.wtperf \
	-o "conn_config=\"cache_size=1G,statistics=[fast,clear],statistics_log=(wait=30)\""
     $ echo "Now generate a graph from the statistics"
     $ python ./tools/wtstats.py WT_TEST/WiredTigerStat.*


mongo server层慢日志获取存储引擎的耗时
std::map<int, std::pair<StringData, Section>> WiredTigerOperationStats::_statNameMap = {
    {WT_STAT_SESSION_BYTES_READ, std::make_pair("bytesRead"_sd, Section::DATA)},
    {WT_STAT_SESSION_BYTES_WRITE, std::make_pair("bytesWritten"_sd, Section::DATA)},
    {WT_STAT_SESSION_LOCK_DHANDLE_WAIT, std::make_pair("handleLock"_sd, Section::WAIT)},
    {WT_STAT_SESSION_READ_TIME, std::make_pair("timeReadingMicros"_sd, Section::DATA)},
    {WT_STAT_SESSION_WRITE_TIME, std::make_pair("timeWritingMicros"_sd, Section::DATA)},
    {WT_STAT_SESSION_LOCK_SCHEMA_WAIT, std::make_pair("schemaLock"_sd, Section::WAIT)},
    {WT_STAT_SESSION_CACHE_TIME, std::make_pair("cache"_sd, Section::WAIT)}};


 ctest -C Debug -j 15 进行test_wt2323_join_visibility等c模块的单元测试，假设第一次运行结束有几个模块失败，下次直接在build中再次运行该 ctest -C Debug -j 15命令可以从失败的模块进行重新测试，如果想单独运行这个模块，在build中find找该模块，如果找不到，可以清理build路径，然后 cmake -DENABLE_SNAPPY=0 -DHAVE_DIAGNOSTIC=1 ../. 后，make -j 3重新编译就会有该模块了，可以find找到
